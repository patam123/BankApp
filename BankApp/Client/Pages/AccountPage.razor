@page "/account"
@inject HttpClient http
@inject AppStateContainer AppState
@inject NavigationManager navManager
@implements IDisposable

@if (AppState.User != null)
{
    <h1>@AppState.User.DisplayName</h1>
}

<h3>Kontoinformation</h3>

@if (AppState.Categories != null && AppState.Categories.Count > 0 && AppState.Transactions != null && AppState.Transactions.Count > 0)
{
    <DetailedAccountInformationHeader BankAccount="bankAccount" FromDate="fromDate" ToDate="toDate" SetFromDate="SetFromDate" SetToDate="SetToDate" />
    <DetailedAccountInformationBody SetCategorySums="SetCategorySums" FromDate="fromDate" ToDate="toDate" Categories="AppState.Categories" Transactions="AppState.Transactions" />
}

@if (AppState.ExpenseLimits != null && AppState.ExpenseLimits.Count > 0)
{
    <div class="accordion">
        <BSCard CardType="CardType.Card">
            <BSCard CardType="CardType.Header">Utgiftsgränser</BSCard>
            <BSCard CardType="CardType.Body">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Namn</th>
                            <th>Kategori</th>
                            <th>Startdatum</th>
                            <th>Slutdatum</th>
                            <th>Utgiftsmål</th>
                            <th>Spenderad summa</th>
                        </tr>
                    </thead>
                    @foreach (var expenseLimit in AppState.ExpenseLimits)
                    {
                        <tbody>
                            <tr style="background-color: @(AppState.Transactions.Where(x => x.CategoryId == expenseLimit.CategoryId && x.TransactionDate >= expenseLimit.StartDate && x.TransactionDate <= expenseLimit.EndDate).Sum(x => x.Amount) > expenseLimit.Amount ? "red" : "seagreen")">
                                <td>@expenseLimit.Name</td>
                                <td>@AppState.Categories.Where(x => x.Id == expenseLimit.CategoryId).FirstOrDefault().Name</td>
                                <td>@expenseLimit.StartDate.ToShortDateString()</td>
                                <td>@expenseLimit.EndDate.ToShortDateString()</td>
                                <td>@expenseLimit.Amount</td>
                                <td>@AppState.Transactions.Where(x => x.CategoryId == expenseLimit.CategoryId && x.TransactionDate >= expenseLimit.StartDate && x.TransactionDate <= expenseLimit.EndDate).Sum(x => x.Amount)</td>
                            </tr>
                        </tbody>
                    }
                </table>
            </BSCard>
        </BSCard>

    </div>
}

@code{


    private BankAccount bankAccount = new BankAccount() { Id = "9876543210" };

    DateTime fromDate = DateTime.Today.AddMonths(-1);
    DateTime toDate = DateTime.Today;

    public List<Category> categories = new List<Category>();

    public List<Transaction> transactions = new List<Transaction>();

    protected override void OnInitialized()
    {
        if (!AppState.IsAuth)
        {
            navManager.NavigateTo("/");
        }
        else
        {
            AppState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);
            bankAccount = new BankAccount() { Id = "0123456789" };
            SetCategorySums();
        }
    }

    public void SetFromDate(ChangeEventArgs e) // consider refactoring, kan plockas ut för att använda till transactions också
    {
        var year = int.Parse(e.Value.ToString().Substring(0, 4));
        var month = int.Parse(e.Value.ToString().Substring(5, 2));
        var day = int.Parse(e.Value.ToString().Substring(8, 2));

        fromDate = new DateTime(year, month, day);
        Console.WriteLine(fromDate);
        SetCategorySums();
    }

    public void SetToDate(ChangeEventArgs e)
    {
        var year = int.Parse(e.Value.ToString().Substring(0, 4));
        var month = int.Parse(e.Value.ToString().Substring(5, 2));
        var day = int.Parse(e.Value.ToString().Substring(8, 2));

        toDate = new DateTime(year, month, day);
        Console.WriteLine(toDate);
        SetCategorySums();
    }

    private void SetCategorySums()
    {
        foreach (var category in AppState.Categories)
        {
            category.TransactionSum = 0;
            category.TransactionSum += AppState.Transactions.FindAll(x => x.CategoryId.Equals(category.Id) && x.TransactionDate >= fromDate && x.TransactionDate <= toDate).Sum(x => x.Amount);
        }
    }

    private async Task AppState_StateChanged(ComponentBase source, string property)
    {
        if (source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (source, property) => await AppState_StateChanged(source, property);
    }
}




