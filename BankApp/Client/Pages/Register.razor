@page "/register"
@inject NavigationManager navManager
@inject HttpClient http
@using System.Text.Json
@using System.Text


<BSForm Model="registrationModel" OnValidSubmit="(() => OnSubmit())">
    <BSFormGroup>
        <BSLabel For="firstname">Förnamn</BSLabel>
        <BSInput T="string" Id="firstname" InputType="InputType.Text" @bind-Value="registrationModel.FirstName" />
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="lastname">Efternamn</BSLabel>
        <BSInput T="string" Id="lastname" InputType="InputType.Text" @bind-Value="registrationModel.LastName" />
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="email">Email</BSLabel>
        <BSInput T="string" Id="email" InputType="InputType.Email" @bind-Value="registrationModel.Email" />
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="password">Lösenord</BSLabel>
        <BSInput T="string" Id="password" InputType="InputType.Password" @bind-Value="registrationModel.Password" />
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="repeatpassword">Upprepa lösenord</BSLabel>
        <BSInput T="string" Id="repeatpassword" InputType="InputType.Password" @bind-Value="registrationModel.RepeatPassword" />
    </BSFormGroup>
    <BSButton ButtonType="ButtonType.Submit">Registrera</BSButton>
</BSForm>

<NavLink href="login" >Har du redan ett konto? Logga in</NavLink>

@code {

    RegistrationModel registrationModel = new RegistrationModel();

    private async Task OnSubmit()
    {
        if (registrationModel.Password.Equals(registrationModel.RepeatPassword))
        {
            //skicka resultat till api  =>
            StringBuilder sb = new StringBuilder();

            sb.Append(registrationModel.FirstName.Substring(0, 1).ToUpper());
            var firstName = sb.Append(registrationModel.FirstName.Substring(1).ToLower());
            registrationModel.FirstName = firstName.ToString();
            sb.Clear();

            sb.Append(registrationModel.LastName.Substring(0, 1).ToUpper());
            var lastName = sb.Append(registrationModel.LastName.Substring(1).ToLower());
            registrationModel.LastName = lastName.ToString();
            sb.Clear();


            Console.WriteLine($"{registrationModel.FirstName} {registrationModel.LastName} {registrationModel.Email} {registrationModel.Password} {registrationModel.RepeatPassword}");
            User user = new User()
            {
                Email = registrationModel.Email,
                Password = registrationModel.Password,
                FirstName = registrationModel.FirstName,
                LastName = registrationModel.LastName,
            };

            var userId = await RegisterUser(user);
            Console.WriteLine(userId);
            StateHasChanged();
            //registrationModel = new RegistrationModel();
            //navManager.NavigateTo("/login");
        }
        else
        {
            //alerta.
        }


    }

    private async Task<string> RegisterUser(User user)
    {
        var datajson = JsonSerializer.Serialize(user);
        var stringContent = new StringContent(datajson, Encoding.UTF8, "application/json");
        var response = await http.PostAsync("/user/register", stringContent);
        var responseContent = await response.Content.ReadAsStringAsync();
        return responseContent;
    }

}
