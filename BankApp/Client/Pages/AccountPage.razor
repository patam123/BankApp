@page "/account"
@using BankApp.Shared.Entities
@inject HttpClient http
@inject AppStateContainer appState

<h3>Kontoinformation</h3>

@if (categories != null && categories.Count > 0 && transactions != null && transactions.Count > 0)
{
    <DetailedAccountInformationHeader BankAccount="bankAccount" FromDate="fromDate" ToDate="toDate" SetFromDate="SetFromDate" SetToDate="SetToDate" />
    <DetailedAccountInformationBody SetCategorySums="SetCategorySums" FromDate="fromDate" ToDate="toDate" Categories="categories" Transactions="transactions" />

}

@code{


    private BankAccount bankAccount;

    DateTime fromDate = DateTime.Today.AddMonths(-1);
    DateTime toDate = DateTime.Today;

    public List<Category> categories = new List<Category>();

    public List<Transaction> transactions = new List<Transaction>();

    protected override async Task OnInitializedAsync()
    {
        categories = await http.GetJsonAsync<List<Category>>("api/categories");
        transactions = await http.GetJsonAsync<List<Transaction>>("api/transactions");
        bankAccount = new BankAccount() { Id = "0123456789" };
        SetCategorySums();
    }

    public void SetFromDate(ChangeEventArgs e) // consider refactoring, kan plockas ut för att använda till transactions också
    {
        var year = int.Parse(e.Value.ToString().Substring(0, 4));
        var month = int.Parse(e.Value.ToString().Substring(5, 2));
        var day = int.Parse(e.Value.ToString().Substring(8, 2));

        fromDate = new DateTime(year, month, day);
        Console.WriteLine(fromDate);
        SetCategorySums();
    }

    public void SetToDate(ChangeEventArgs e)
    {
        var year = int.Parse(e.Value.ToString().Substring(0, 4));
        var month = int.Parse(e.Value.ToString().Substring(5, 2));
        var day = int.Parse(e.Value.ToString().Substring(8, 2));

        toDate = new DateTime(year, month, day);
        Console.WriteLine(toDate);
        SetCategorySums();
    }

    private void SetCategorySums()
    {
        foreach (var category in categories)
        {
            category.TransactionSum = 0;
            category.TransactionSum += transactions.FindAll(x => x.CategoryId.Equals(category.Id) && x.TransactionDate >= fromDate && x.TransactionDate <= toDate).Sum(x => x.Amount);
        }
    }
}




