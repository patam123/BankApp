@page "/"
@inject NavigationManager navManager
@inject AppStateContainer AppState
@inject HttpClient http
@implements IDisposable

<BSForm Model="loginModel" OnSubmit="(() => OnSubmit())">
    <BSFormGroup>
        <BSLabel For="email">Email</BSLabel>
        <BSInput T="string" Id="email" InputType="InputType.Email" @bind-Value="loginModel.Email" />
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="password">Lösenord</BSLabel>
        <BSInput T="string" Id="password" InputType="InputType.Password" @bind-Value="loginModel.Password" />
    </BSFormGroup>
    <BSButton ButtonType="ButtonType.Submit" Color="Color.Dark">Logga in</BSButton>
</BSForm>
<BSModal @ref="LoginModal">
    <BSModalHeader OnClick="@(() => LoginModal.Hide())">Inloggning misslyckades</BSModalHeader>
    <BSModalBody>Emailadress eller lösenord felaktigt.</BSModalBody>
    <BSModalFooter><BSButton Color="Color.Dark" @onclick="@(() => LoginModal.Hide())">Stäng</BSButton></BSModalFooter>
</BSModal>
<NavLink href="register">Inget konto? Registrera</NavLink>

@code {

    BSModal LoginModal;
    LoginModel loginModel = new LoginModel();
    private List<Transaction> transactions;
    private List<Category> categories;

    private async Task OnSubmit()
    {
        try
        {
            User user = new User()
            {
                Email = loginModel.Email,
                Password = loginModel.Password,

            };

            var userResp = await LoginRequest(user);

            if (userResp.UserId != null)
            {
                await http.SendJsonAsync(HttpMethod.Post, "/user/cookie", userResp);

                await GetCategories(userResp.UserId);

                await GetTransactions(userResp.UserId);
                await GetExpenseLimits(userResp.UserId);
                //skicka loginModel till api => få tillbaka response =>
                await GetUser(userResp.UserId);
                navManager.NavigateTo("/account");
            }
            else
            {
                LoginModal.Show();
            }
        }
        catch (NullReferenceException)
        {

            LoginModal.Show();
        }
    }

    protected override void OnInitialized()
    {
        AppState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);

    }

    private async Task<UserResponse> LoginRequest(User user)
    {
        var userResp = await http.SendJsonAsync<UserResponse>(HttpMethod.Post, "/user/login", user);
        return userResp;
    }

    private async Task GetCategories(string userId)
    {
        try
        {
            categories = await http.GetJsonAsync<List<Category>>("api/categories/" + userId);
            AppState.UpdateCategories(this, categories);

        }
        catch (Exception)
        {

            throw;
        }
    }

    private async Task GetTransactions(string userId)
    {
        try
        {
            transactions = await http.GetJsonAsync<List<Transaction>>("api/transactions/" + userId);
            AppState.UpdateTransactions(this, transactions);

        }
        catch (Exception)
        {

            throw;
        }
    }

    private async Task GetExpenseLimits(string userId)
    {
        try
        {
            var expenseLimits = await http.GetJsonAsync<List<ExpenseLimit>>("api/expenselimits/" + userId);
            AppState.UpdateExpenseLimits(this, expenseLimits);
        }
        catch (Exception)
        {

            throw;
        }
    }

    private async Task GetUser(string id)
    {
        var user = await http.GetJsonAsync<User>("api/user/" + id);
        Console.WriteLine(user.Id);
        AppState.SetAuthState(this, user, true);
    }

    private async Task AppState_StateChanged(ComponentBase source, string property)
    {
        if (source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (source, property) => await AppState_StateChanged(source, property);
    }

}
