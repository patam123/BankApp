@page "/categories"
@inject HttpClient http
@inject AppStateContainer AppState
@inject NavigationManager navManager
@implements IDisposable

@if (AppState.IsAuth)
{
    <h3>Kategorier</h3>

    <div>
        <BSButton OnClick="(() => NewCategoryModal.Show())" Color="Color.Dark">Skapa ny kategori <span class="oi oi-plus" style="margin-left: 5px;"></span></BSButton>
        <br />
        <BSModal @ref="NewCategoryModal">
            <BSModalHeader OnClick="@(() => NewCategoryModal.Hide())">Lägg till ny kategori</BSModalHeader>
            <BSModalBody>
                <BSForm Model="newCategory" OnSubmit="CreateCategory">
                    <BSFormGroup>
                        <BSLabel>Namn</BSLabel>
                        <BSInput @bind-Value="newCategory.Name" placeholder="Namnge kategori..."></BSInput>
                        @if (newCategoryNameError)
                        {
                            <div style="color: red;">*Ange namn</div>
                        }
                    </BSFormGroup>
                    
                    <BSFormGroup>
                        <BSLabel>Färg</BSLabel>
                        <BSInput InputType="InputType.Color" @bind-Value="newCategory.Color"></BSInput>
                        @if (newCategoryColorError)
                        {
                            <div style="color: red;">*Ange färg</div>
                        }
                    </BSFormGroup>
                    
                    <BSButton Color="Color.Dark" ButtonType="ButtonType.Submit">Lägg till</BSButton>
                </BSForm>
            </BSModalBody>
            <BSModalFooter><BSButton Color="Color.Dark" OnClick="@(() => NewCategoryModal.Hide())">Stäng</BSButton></BSModalFooter>
        </BSModal>

        <br />
        <BSCard CardType="CardType.Card">
            <BSCard CardType="CardType.Header">Befintliga kategorier</BSCard>
            <BSCard CardType="CardType.Body">
                @if (AppState.Categories != null && AppState.Categories.Count != 0)
                {
                    @foreach (var category in AppState.Categories)
                    {
                        if (category.Id != "nm5tXgPCOwfavR9dbF2w")
                        {

                        
                        if (category.IsBeingModified)
                        {
                            <BSForm style="width: auto;" IsInline="true" Model="category" OnSubmit="@(() => UpdateCategory(category))">
                                <BSInput InputType="InputType.Text" @bind-Value="category.Name"></BSInput>
                                <BSInput style="width: 50px" InputType="InputType.Color" @bind-Value="category.Color"></BSInput>
                                <BSButton Color="Color.Success" ButtonType="ButtonType.Submit">Spara</BSButton>
                                <BSButton OnClick="@(() => category.SetModificationState(false))" Color="Color.Dark">Avbryt</BSButton>
                            </BSForm>
                        }
                        else
                        {
                            <div style="background: linear-gradient(180deg, @category.Color 0%, rgba(228, 80, 80, 0) 120%); display: flex; justify-content:space-between">
                                <p style="margin-left: 10px;">@category.Name</p>
                                <div>
                                    <BSButton Color="Color.Dark" OnClick="(() => category.SetModificationState(true))">Redigera</BSButton>
                                    <BSButton Color="Color.Danger" OnClick="(() => OpenDeleteModal(category.Id))">Ta bort</BSButton>
                                </div>
                            </div>
                            }
                        }
                    }
                }
            </BSCard>
        </BSCard>
    </div>

    <br />
    <br />

    <BSModal @ref="ConfirmDeleteCategory">
        <BSModalHeader OnClick="(() => ConfirmDeleteCategory.Hide())">Ta bort kategori</BSModalHeader>
        <BSModalBody><p>Vill du verkligen ta bort denna kategori?</p>
        <p>Detta innebär att alla utgiftsmål kopplade till kategorin kommer att försvinna.</p></BSModalBody>
        <BSModalFooter>
            <BSButton Color="Color.Danger" OnClick="(() => RemoveCategory())">Bekräfta</BSButton>
            <BSButton Color="Color.Dark" OnClick="(() => ConfirmDeleteCategory.Hide())">Avbryt</BSButton>
        </BSModalFooter>
    </BSModal>
    
}

@code {

    BSModal ConfirmDeleteCategory { get; set; }
    BSModal NewCategoryModal { get; set; }
    Category newCategory = new Category();
    List<Category> categories = new List<Category>();

    string categoryIdToDelete;

    bool newCategoryColorError;
    bool newCategoryNameError;


    protected override async Task OnInitializedAsync()
    {
        AppState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);
        if (!AppState.IsAuth)
        {
            try
            {
                var user = await ValidateSession();
                if (string.IsNullOrEmpty(user.ErrorMessage))
                {
                    await GetUser(user.UserId);
                    await GetCategories();
                    await GetTransactions();
                    await GetExpenseLimits();
                }
                else
                {
                    navManager.NavigateTo("/");
                }
            }
            catch (Exception)
            {
                Console.WriteLine("error");
                navManager.NavigateTo("/");
            }
        }

    }


    private async Task<UserResponse> ValidateSession()
    {
        var user = await http.SendJsonAsync<UserResponse>(HttpMethod.Post, "/user/session", null);
        return user;
    }



    private async Task GetCategories()
    {
        categories = await http.GetJsonAsync<List<Category>>($"api/categories/{AppState.User.Id}");
        AppState.UpdateCategories(this, categories);
    }

    private async Task UpdateCategory(Category category)
    {
        category.SetModificationState(false);
        await http.SendJsonAsync(HttpMethod.Put, "api/categories", category);

    }

    private void OpenDeleteModal(string categoryId)
    {
        categoryIdToDelete = categoryId;
        ConfirmDeleteCategory.Show();
    }

    private async void RemoveCategory()
    {

        await http.DeleteAsync("api/categories/" + categoryIdToDelete);
        await GetCategories();
        await GetTransactions();
        await GetExpenseLimits();
        ConfirmDeleteCategory.Hide();
        StateHasChanged();
    }

    private async Task GetExpenseLimits()
    {
        var expenseLimits = await http.GetJsonAsync<List<ExpenseLimit>>("api/expenselimits/" + AppState.User.Id);
        AppState.UpdateExpenseLimits(this, expenseLimits);
    }

    private async Task CreateCategory()
    {
        newCategory.OwnerId = AppState.User.Id;
        if (newCategory.Color == null)
        {
            newCategoryColorError = true;
            await Task.Delay(5000);
            newCategoryColorError = false;
            StateHasChanged();
        }
        else if (newCategory.Name == null)
        {
            newCategoryNameError = true;
            await Task.Delay(5000);
            newCategoryNameError = false;
            StateHasChanged();
        }
        else
        {
            await http.SendJsonAsync(HttpMethod.Post, "api/categories", newCategory);
            newCategory = new Category();
            await GetCategories();
        }

    }


    private async Task GetTransactions()
    {
        var transactions = await http.GetJsonAsync<List<Transaction>>("api/transactions/" + AppState.User.Id);
        AppState.UpdateTransactions(this, transactions);

    }
    private async Task GetUser(string userId)
    {
        var user = await http.GetJsonAsync<User>("api/user/" + userId);
        AppState.SetAuthState(this, user, true);
    }

    private async Task AppState_StateChanged(ComponentBase source, string property)
    {
        if (source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (source, property) => await AppState_StateChanged(source, property);
    }

}
