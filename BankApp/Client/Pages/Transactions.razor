@page "/transactions"

<h3>Transaktioner</h3>
<TransactionHeader SetFromDate="SetFromDate" SetToDate="SetToDate" SetCurrentCategory="SetCurrentCategory" Categories="categories" CurrentCategory="currentCategory" />

@if (transactions == null)
{
    <p><em>Loading...</em></p>
}

else
{
    <TransactionBody Categories="categories" CurrentCategory="currentCategory" FromDate="FromDate" ToDate="ToDate" Index="index" PageSize="pageSize" Transactions="transactions" />

    <nav aria-label="Page navigation example">
        <ul class="pagination">
            <li class="page-item"><div class="page-link" style="cursor: pointer" @onclick="(() => SetIndex(index - 1))">Föregående</div></li>
            @for (int i = 0; i < (GetTransactionCount() / pageSize) + 1; i++)
            {
                var n = i;
                <li class="page-item"><div class="page-link" style="cursor: pointer" @onclick="(() => SetIndex(n))">@(i + 1) </div></li>

            }
            <li class="page-item"><div class="page-link" style="cursor: pointer" @onclick="(() => SetIndex(index + 1))">Nästa</div></li>
        </ul>
    </nav>
}

@code {
    int index = 0;
    int pageSize = 5;

    public DateTime FromDate { get; set; } = DateTime.Today.AddMonths(-1);
    public DateTime ToDate { get; set; } = DateTime.Today;
    public Category currentCategory = new Category() { Name = null };
    public List<Transaction> transactions;
    public List<Category> categories = new List<Category>() // ska laddas in från databas
{
        new Category() { Name = "Mat", Color = "red" },
        new Category() { Name = "Kläder", Color = "pink" },
        new Category() { Name = "Transport", Color = "brown" },
        new Category() { Name = "Bostad", Color = "blue" },
        new Category() { Name = "Uteliv", Color = "yellow" },
        new Category() { Name = "Fritidsaktivitet", Color = "green" },
    };

    protected override void OnInitialized()
    {
        transactions = new List<Transaction>()

{
            new Transaction(new DateTime(2020, 11, 11), "ICA Sannegården", new Category{ Name = "Mat", Color = "red"}, 369.726m),
            new Transaction(new DateTime(2020, 11, 11), "ICA Sannegården", new Category{ Name = "Kläder", Color = "pink"}, 369.726m),
            new Transaction(new DateTime(2020, 11, 11), "ICA Sannegården", new Category{ Name = "Mat", Color = "red"}, 369.726m),
            new Transaction(new DateTime(2020, 11, 11), "ICA Sannegården", new Category{ Name = "Mat", Color = "red"}, 369.726m),
            new Transaction(new DateTime(2020, 11, 11), "ICA Sannegården", new Category{ Name = "Mat", Color = "red"}, 369.726m),
            new Transaction(new DateTime(2020, 11, 11), "ICA Maxi Partille", new Category{ Name = "Mat", Color = "red"}, 369.726m),
            new Transaction(new DateTime(2020, 11, 11), "ICA Sannegården", new Category{ Name = "Mat", Color = "red"}, 369.726m),
            new Transaction(new DateTime(2020, 11, 11), "ICA Sannegården", new Category{ Name = "Mat", Color = "red"}, 369.726m)

        };
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine(currentCategory.Name);
    }

    protected override bool ShouldRender()
    {
        return true;
    }

    public void SetCurrentCategory(string category)
    {
        if (category == null)
        {
            currentCategory = new Category() { Name = null };
        }
        else
        {
            currentCategory = categories.Find(x => x.Name.Equals(category));
            Console.WriteLine(currentCategory);
        }
    }

    private int GetTransactionCount()
    {
        if (currentCategory.Name == null)
        {
            return transactions.Count;
        }
        else
        {
            return transactions.FindAll(x => x.Category.Name.Equals(currentCategory.Name)).Count;
        }
    }

    public void SetIndex(int i) // bör endast baseras på vilken som är nuvarande kategori.
    {
        if (i >= 0 && i <= (GetTransactionCount() / pageSize))
        {
            Console.WriteLine(i);
            index = i;
            Console.WriteLine(index);
        }
    }

    public void SetFromDate(ChangeEventArgs e)
    {
        var year = int.Parse(e.Value.ToString().Substring(0, 4));
        var month = int.Parse(e.Value.ToString().Substring(5, 2));
        var day = int.Parse(e.Value.ToString().Substring(8, 2));

        FromDate = new DateTime(year, month, day);
        Console.WriteLine(FromDate);
    }

    public void SetToDate(ChangeEventArgs e)
    {
        var year = int.Parse(e.Value.ToString().Substring(0, 4));
        var month = int.Parse(e.Value.ToString().Substring(5, 2));
        var day = int.Parse(e.Value.ToString().Substring(8, 2));

        ToDate = new DateTime(year, month, day);
        Console.WriteLine(ToDate);
    }

}
