@page "/categories"
@inject HttpClient http
@inject AppStateContainer AppState
@implements IDisposable

<h3>Kategorier</h3>

<div style="display: flex; justify-content:space-between;">
    <BSCard CardType="CardType.Card">
        <BSCard CardType="CardType.Header" HeadingSize="HeadingSize.H4">Lägg till kategori</BSCard>
        <BSCard CardType="CardType.Body">
            <BSForm Model="newCategory" OnSubmit="CreateCategory">
                <BSFormGroup>
                    <BSLabel>Namn</BSLabel>
                    <BSInput @bind-Value="newCategory.Name" placeholder="Namnge kategori..."></BSInput>
                </BSFormGroup>
                <BSFormGroup>
                    <BSLabel>Färg</BSLabel>
                    <BSInput InputType="InputType.Color" @bind-Value="newCategory.Color"></BSInput>
                </BSFormGroup>
                <BSButton ButtonType="ButtonType.Submit">Lägg till</BSButton>
            </BSForm>
        </BSCard>
    </BSCard>

    <BSCard CardType="CardType.Card">
        <BSCard CardType="CardType.Header" HeadingSize="HeadingSize.H4">Befintliga kategorier</BSCard>
        <BSCard CardType="CardType.Body">
            @if (AppState.Categories != null && AppState.Categories.Count != 0)
            {
                @foreach (var category in AppState.Categories)
                {
                    if (category.IsBeingModified)
                    {
                        <BSForm IsInline="true" Model="category" OnSubmit="@(() => UpdateCategory(category))">
                            <BSInput InputType="InputType.Text" @bind-Value="category.Name"></BSInput>
                            <BSInput InputType="InputType.Color" @bind-Value="category.Color"></BSInput>
                            <BSButton ButtonType="ButtonType.Submit">Spara</BSButton>
                        </BSForm>
                    }
                    else
                    {
                        <div style="background: linear-gradient(180deg, @category.Color 0%, rgba(228, 80, 80, 0) 120%); display: flex; justify-content:space-between">
                            <p>@category.Name</p>
                            <div>
                                <BSButton OnClick="(() => category.SetModificationState(true))">Redigera</BSButton>
                                <BSButton OnClick="(() => RemoveCategory(category.Id))">Ta bort</BSButton> @*öppna modal => ta bort i modal*@
                            </div>
                        </div>
                    }
                }
            }
        </BSCard>
    </BSCard>
</div>

@code {
    Category newCategory = new Category();
    //[CascadingParameter] public MainLayout MainLayout { get; set; }
    List<Category> categories = new List<Category>();

    protected override void OnInitialized()
    {
        AppState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);

        var userId = "id";
    }

    private async Task GetCategories()
    {
        categories = await http.GetJsonAsync<List<Category>>($"api/categories/{AppState.User.Id}");
        AppState.UpdateCategories(this, categories);
    }

    private async Task UpdateCategory(Category category)
    {
        category.SetModificationState(false);
        // => skicka till api => databas
        await http.SendJsonAsync(HttpMethod.Put, "api/categories", category);

    }

    private async void RemoveCategory(string categoryId)
    {

        //skicka till api => databas
        await http.DeleteAsync("api/categories/" + categoryId);
        categories.RemoveAll(x => x.Id == categoryId);
        AppState.UpdateCategories(this, categories);
        StateHasChanged();

    }

    private async Task CreateCategory()
    {
        newCategory.OwnerId = AppState.User.Id;
        //skicka till api => databas
        await http.SendJsonAsync(HttpMethod.Post, "api/categories", newCategory);
        newCategory = new Category();
        await GetCategories();

    }

    private async Task AppState_StateChanged(ComponentBase source, string property)
    {
        if (source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (source, property) => await AppState_StateChanged(source, property);
    }

}
