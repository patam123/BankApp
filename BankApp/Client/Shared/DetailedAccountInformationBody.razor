

<div class="accordion">
    <BSCollapseGroup>
        @foreach (var category in Categories)
        {
            <BSCollapseItem>
                <BSCard CardType="CardType.Card">
                    <BSCard CardType="CardType.Header">
                        <span class="oi oi-caret-right"></span>
                        <BSCollapseToggle><div style="display: flex; justify-content: space-between"><span>@category.Name</span><span>@FromDate.ToShortDateString() - @ToDate.ToShortDateString()</span><span>@(category.TransactionSum == 0 ? "-" : category.TransactionSum.ToString() + " kr")</span></div></BSCollapseToggle>
                    </BSCard>
                    <BSCollapse>
                        <BSCard CardType="CardType.Body">
                            <table class="table">
                                <tbody>
                                    @foreach (var transaction in Transactions)
                                    {
                                        if (transaction.Category.Name.Equals(category.Name) && transaction.TransactionDate >= FromDate && transaction.TransactionDate <= ToDate)
                                        {
                                            <IndividualTransaction SetCatSum="SetCategorySums" Transaction="transaction" Categories="Categories" />
                                        }
                                    }
                                </tbody>
                            </table>
                        </BSCard>
                    </BSCollapse>
                </BSCard>
            </BSCollapseItem>
        }
    </BSCollapseGroup>


</div>


@code {
    [Parameter] public List<Category> Categories { get; set; }
    [Parameter] public List<Transaction> Transactions { get; set; }
    [Parameter] public DateTime FromDate { get; set; }
    [Parameter] public DateTime ToDate { get; set; }

    private void SetCategorySums()
    {
        foreach (var category in Categories)
        {
            category.TransactionSum = 0;
            category.TransactionSum += Transactions.FindAll(x => x.Category.Name.Equals(category.Name)).Sum(x => x.Amount);
        }
    }

    protected override void OnInitialized()
    {
        SetCategorySums();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        SetCategorySums();
    }
    protected override bool ShouldRender()
    {
        return true;
    }
}
