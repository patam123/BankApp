@page "/"
@inject NavigationManager navManager
@inject AppStateContainer AppState
@inject HttpClient http
@implements IDisposable
@using System.Text
@using System.Text.Json

<BSForm Model="loginModel" OnValidSubmit="(() => OnSubmit())">
    <BSFormGroup>
        <BSLabel For="email">Email</BSLabel>
        <BSInput T="string" Id="email" InputType="InputType.Email" @bind-Value="loginModel.Email" />
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="password">Lösenord</BSLabel>
        <BSInput T="string" Id="password" InputType="InputType.Password" @bind-Value="loginModel.Password" />
    </BSFormGroup>
    <BSButton ButtonType="ButtonType.Submit">Logga in</BSButton>
</BSForm>

<NavLink href="register">Inget konto? Registrera</NavLink>

@code {

    LoginModel loginModel = new LoginModel();
    private List<Transaction> transactions;
    private List<Category> categories;

    private async Task OnSubmit()
    {
        User user = new User()
        {
            Email = loginModel.Email,
            Password = loginModel.Password,

        };

        var userResp = await LoginRequest(user);
        Console.WriteLine(userResp.UserId);

        //var datajson = JsonSerializer.Serialize(user);
        //var content = new StringContent(datajson, Encoding.UTF8, "application/json");
        //var hello = await http.PostAsync("/user/login", content);
        //var helloString = await hello.Content.ReadAsStringAsync();

        //Console.WriteLine(hello.IsSuccessStatusCode.ToString());
        if (userResp.UserId != null)
        {
            await GetCategories(userResp.UserId);

            await GetTransactions(userResp.UserId);
            //skicka loginModel till api => få tillbaka response =>
            User loggedInUser = new User();
            loggedInUser.Id = userResp.UserId;
            loggedInUser.DisplayName = userResp.DisplayName;
            AppState.SetAuthState(this, loggedInUser, true);
            navManager.NavigateTo("/account");
        }
        else
        {
            Console.WriteLine("Användarnamn eller lösenord felaktigt"); // flytta till fbauth.
            Console.WriteLine(userResp.ErrorMessage);
        }
    }

    protected override void OnInitialized()
    {
        AppState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);

    }

    private async Task<UserResponse> LoginRequest(User user)
    {
        var userResp = await http.SendJsonAsync<UserResponse>(HttpMethod.Post, "/user/login", user);
        return userResp;
    }

    private async Task GetCategories(string userId)
    {
        try
        {
            categories = await http.GetJsonAsync<List<Category>>("api/categories/" + userId);
            AppState.UpdateCategories(this, categories);

        }
        catch (Exception)
        {

            throw;
        }
    }

    private async Task GetTransactions(string userId)
    {
        try
        {
            transactions = await http.GetJsonAsync<List<Transaction>>("api/transactions/" + userId);
            AppState.UpdateTransactions(this, transactions);

        }
        catch (Exception)
        {

            throw;
        }
    }

    private async Task AppState_StateChanged(ComponentBase source, string property)
    {
        if (source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (source, property) => await AppState_StateChanged(source, property);
    }

}
