@page "/"
@inject NavigationManager navManager
@inject AppStateContainer AppState
@inject HttpClient http
@implements IDisposable

<BSForm Model="loginModel" OnValidSubmit="(() => OnSubmit())">
    <BSFormGroup>
        <BSLabel For="email">Email</BSLabel>
        <BSInput T="string" Id="email" InputType="InputType.Email" @bind-Value="loginModel.Email" />
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="password">Lösenord</BSLabel>
        <BSInput T="string" Id="password" InputType="InputType.Password" @bind-Value="loginModel.Password" />
    </BSFormGroup>
    <BSButton ButtonType="ButtonType.Submit">Logga in</BSButton>
</BSForm>

<NavLink href="register">Inget konto? Registrera</NavLink>

@code {

    LoginModel loginModel = new LoginModel();
    private List<Transaction> transactions;
    private List<Category> categories;

    private async Task OnSubmit()
    {

        await GetCategories();
        await GetTransactions();
        //skicka loginModel till api => få tillbaka response =>
        AppState.SetAuthState(this, true);
        navManager.NavigateTo("/account");
    }

    protected override void OnInitialized()
    {
        AppState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);

    }

    private async Task GetCategories()
    {
        try
        {
            categories = await http.GetJsonAsync<List<Category>>("api/categories");
            AppState.UpdateCategories(this, categories);

        }
        catch (Exception)
        {

            throw;
        }
    }

    private async Task GetTransactions()
    {
        try
        {
            transactions = await http.GetJsonAsync<List<Transaction>>("api/transactions");
            AppState.UpdateTransactions(this, transactions);

        }
        catch (Exception)
        {

            throw;
        }
    }

    private async Task AppState_StateChanged(ComponentBase source, string property)
    {
        if (source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (source, property) => await AppState_StateChanged(source, property);
    }

}
