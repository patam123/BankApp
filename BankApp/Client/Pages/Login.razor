@page "/"
@inject NavigationManager navManager
@inject AppStateContainer AppState
@inject HttpClient http
@implements IDisposable

@if (!isLoading)
{
    <BSForm Model="loginModel" OnSubmit="(() => OnSubmit())">
        <BSFormGroup>
            <BSLabel For="email">Email</BSLabel>
            <BSInput T="string" Id="email" InputType="InputType.Email" @bind-Value="loginModel.Email" />
        </BSFormGroup>
        <BSFormGroup>
            <BSLabel For="password">Lösenord</BSLabel>
            <BSInput T="string" Id="password" InputType="InputType.Password" @bind-Value="loginModel.Password" />
        </BSFormGroup>
        <BSButton ButtonType="ButtonType.Submit" Color="Color.Dark">Logga in</BSButton>
    </BSForm>
    <BSModal @ref="LoginModal">
        <BSModalHeader OnClick="@(() => LoginModal.Hide())">Inloggning misslyckades</BSModalHeader>
        <BSModalBody>Emailadress eller lösenord felaktigt.</BSModalBody>
        <BSModalFooter><BSButton Color="Color.Dark" @onclick="@(() => LoginModal.Hide())">Stäng</BSButton></BSModalFooter>
    </BSModal>
    <NavLink href="register">Inget konto? Registrera</NavLink>
}
else
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}

@code {

    BSModal LoginModal;
    LoginModel loginModel = new LoginModel();
    private List<Transaction> transactions;
    private List<Category> categories;
    bool isLoading;

    private async Task OnSubmit()
    {
        try
        {
            User user = new User()
            {
                Email = loginModel.Email,
                Password = loginModel.Password,

            };

            var userResp = await LoginRequest(user);

            if (userResp.UserId != null)
            {
                await http.SendJsonAsync(HttpMethod.Post, "/user/cookie", userResp);

                await GetCategories(userResp.UserId);

                await GetTransactions(userResp.UserId);
                await GetExpenseLimits(userResp.UserId);
                await GetUser(userResp.UserId);

                navManager.NavigateTo("/account");
            }
            else
            {
                LoginModal.Show();
            }
        }
        catch (NullReferenceException)
        {

            LoginModal.Show();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        AppState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);

        try
        {
            isLoading = true;
            var user = await ValidateSession();
            if (string.IsNullOrEmpty(user.ErrorMessage))
            {
                await GetUser(user.UserId);
                await GetCategories(user.UserId);
                await GetTransactions(user.UserId);
                await GetExpenseLimits(user.UserId);
                navManager.NavigateTo("/account");
            }
            isLoading = false;
        }
        catch (Exception)
        {
            Console.WriteLine("error");
            navManager.NavigateTo("/");
        }

    }

    private async Task<UserResponse> LoginRequest(User user)
    {
        var userResp = await http.SendJsonAsync<UserResponse>(HttpMethod.Post, "/user/login", user);
        return userResp;
    }

    private async Task GetCategories(string userId)
    {
        categories = await http.GetJsonAsync<List<Category>>("api/categories/" + userId);
        AppState.UpdateCategories(this, categories);
    }

    private async Task<UserResponse> ValidateSession()
    {
        var user = await http.SendJsonAsync<UserResponse>(HttpMethod.Post, "/user/session", null);
        return user;
    }

    private async Task GetTransactions(string userId)
    {
        transactions = await http.GetJsonAsync<List<Transaction>>("api/transactions/" + userId);
        AppState.UpdateTransactions(this, transactions);
    }

    private async Task GetExpenseLimits(string userId)
    {
        var expenseLimits = await http.GetJsonAsync<List<ExpenseLimit>>("api/expenselimits/" + userId);
        AppState.UpdateExpenseLimits(this, expenseLimits);
    }

    private async Task GetUser(string id)
    {
        var user = await http.GetJsonAsync<User>("api/user/" + id);
        AppState.SetAuthState(this, user, true);
    }

    private async Task AppState_StateChanged(ComponentBase source, string property)
    {
        if (source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (source, property) => await AppState_StateChanged(source, property);
    }

}
