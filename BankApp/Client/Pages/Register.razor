@page "/register"
@inject NavigationManager navManager
@inject HttpClient http
@using System.Text.Json
@using System.Text


<BSForm Model="registrationModel" OnSubmit="(() => OnSubmit())">
    <BSFormGroup>
        <BSLabel For="firstname">Förnamn</BSLabel>
        <BSInput T="string" Id="firstname" InputType="InputType.Text" @bind-Value="registrationModel.FirstName" />
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="lastname">Efternamn</BSLabel>
        <BSInput T="string" Id="lastname" InputType="InputType.Text" @bind-Value="registrationModel.LastName" />
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="email">Email</BSLabel>
        <BSInput T="string" Id="email" InputType="InputType.Email" @bind-Value="registrationModel.Email" />
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="password">Lösenord</BSLabel>
        <BSInput T="string" Id="password" InputType="InputType.Password" @bind-Value="registrationModel.Password" />
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="repeatpassword">Upprepa lösenord</BSLabel>
        <BSInput T="string" Id="repeatpassword" InputType="InputType.Password" @bind-Value="registrationModel.RepeatPassword" />
    </BSFormGroup>
    <BSButton ButtonType="ButtonType.Submit" Color="Color.Dark">Registrera</BSButton>
</BSForm>

<BSModal @ref="RegisterModal">
    <BSModalHeader OnClick="@(() => RegisterModal.Hide())">@errorHeader</BSModalHeader>
    <BSModalBody>@errorMessage</BSModalBody>
    <BSModalFooter>
        <BSButton Color="Color.Dark" @onclick="@(() => RegisterModal.Hide())">Stäng</BSButton>
    </BSModalFooter>
</BSModal>

<NavLink href="/">Har du redan ett konto? Logga in</NavLink>

@code {


    BSModal RegisterModal;
    private string errorHeader;
    private string errorMessage;
    RegistrationModel registrationModel = new RegistrationModel();

    private void ShowError(string message, string header)
    {
        errorMessage = message;
        errorHeader = header;
        RegisterModal.Show();
    }

    private async Task OnSubmit()
    {
        try
        {
            if (registrationModel.Password.Length < 8)
            {
                ShowError("Ditt lösenord måste innehålla minst 8 tecken.", "Svagt lösenord");
                return;
            }


            if (registrationModel.Password.Equals(registrationModel.RepeatPassword))
            {
                //skicka resultat till api  =>

                StringBuilder sb = new StringBuilder();

                if (registrationModel.FirstName != null)
                {
                    sb.Append(registrationModel.FirstName.Substring(0, 1).ToUpper());
                    var firstName = sb.Append(registrationModel.FirstName.Substring(1).ToLower());
                    registrationModel.FirstName = firstName.ToString();
                    sb.Clear();
                }
                else
                {
                    ShowError("Du måste ange ett förnamn.", "Förnamn");
                    return;
                }

                if (registrationModel.LastName != null)
                {
                    sb.Append(registrationModel.LastName.Substring(0, 1).ToUpper());
                    var lastName = sb.Append(registrationModel.LastName.Substring(1).ToLower());
                    registrationModel.LastName = lastName.ToString();
                    sb.Clear();
                }
                else
                {
                    ShowError("Du måste ange ett efternamn.", "Efternamn");
                    return;
                }



                Console.WriteLine($"{registrationModel.FirstName} {registrationModel.LastName} {registrationModel.Email} {registrationModel.Password} {registrationModel.RepeatPassword}");
                User user = new User()
                {
                    Email = registrationModel.Email,
                    Password = registrationModel.Password,
                    FirstName = registrationModel.FirstName,
                    LastName = registrationModel.LastName,
                };

                var userId = await RegisterUser(user);
                Console.WriteLine(userId);
                if (userId != "A user with this email already exists.")
                {
                    user.Id = userId;
                    await CreateUser(user);
                }
                else
                {
                    ShowError("Det finns redan en användare med den mailadressen.", "Användaren existerar");
                }
                StateHasChanged();
            }
            else
            {
                ShowError("Lösenorden måste stämma överens.", "Felaktigt lösenord");
                return;
            }
        }
        catch (NullReferenceException)
        {

            ShowError("Samtliga fält måste fyllas i.", "Fyll i fälten");
            return;
        }

    }

    private async Task<string> RegisterUser(User user)
    {
        var datajson = JsonSerializer.Serialize(user);
        var stringContent = new StringContent(datajson, Encoding.UTF8, "application/json");
        var response = await http.PostAsync("/user/register", stringContent);
        var responseContent = await response.Content.ReadAsStringAsync();
        return responseContent;
    }
    private async Task CreateUser(User user)
    {
        await http.SendJsonAsync(HttpMethod.Post, "user/createuserdoc", user);
    }

}
