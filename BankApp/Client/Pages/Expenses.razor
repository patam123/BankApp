@page "/expenses"
@inject AppStateContainer AppState
@inject HttpClient http
@inject NavigationManager navManager
@implements IDisposable

@if (AppState.IsAuth)
{

    <h3>Utgiftsmål</h3>

    <div>
        <BSButton Color="Color.Dark" OnClick="@(() => ShowNewExpenseModal())">Lägg till nytt utgiftsmål <span class="oi oi-plus" style="margin-left: 5px"></span></BSButton>
        <br />
        <BSModal @ref="NewExpenseLimitModal">
            <BSModalHeader OnClick="@(() => NewExpenseLimitModal.Hide())">Skapa nytt utgiftsmål</BSModalHeader>
            <BSModalBody>
                <BSForm Model="newExpenseLimit" OnSubmit="CreateExpenseLimit">
                    <BSFormGroup>
                        <BSLabel>Namn</BSLabel>
                        <BSInput @bind-Value="newExpenseLimit.Name"></BSInput>
                        @if (expenseLimitNameError)
                        {
                            <div style="color: red">*Ange namn</div>
                        }
                    </BSFormGroup>

                    <BSFormGroup>
                        <BSLabel>Kategori</BSLabel>
                        <BSInput InputType="InputType.Select" @bind-Value="newExpenseLimit.CategoryId">
                            @foreach (var category in AppState.Categories)
                                {
                                <option value="@category.Id">@category.Name</option>
                                }
                        </BSInput>
                        @if (expenseLimitCategoryError)
                        {
                            <div style="color: red;">*Ange kategori</div>
                        }
                    </BSFormGroup>

                    <BSFormGroup>
                        <BSLabel>Summa</BSLabel>
                        <BSInput InputType="InputType.Number" @bind-Value="newExpenseLimit.Amount"></BSInput>
                    </BSFormGroup>
                    <BSFormGroup>
                        <BSButton Color="Color.Dark" @onclick="@(() => DateModal.Show())">Välj datum</BSButton>
                        <BSModal @ref="DateModal">
                            <BSModalHeader OnClick="@(() => DateModal.Hide())">Ändra tidsintervall</BSModalHeader>
                            <BSModalBody>
                                <DisplayDatesModal SetFromDate="SetFromDate" SetToDate="SetToDate" />
                            </BSModalBody>
                            <BSModalFooter>
                                <BSButton Color="Color.Dark" @onclick="@(() => DateModal.Hide())">Stäng</BSButton>
                            </BSModalFooter>
                        </BSModal>
                        @if (expenseLimitDateError)
                        {
                            <div style="color: red">*Ange datum</div>
                        }
                    </BSFormGroup>
                    <br />
                    <BSButton Color="Color.Dark" ButtonType="ButtonType.Submit">Lägg till</BSButton>
                </BSForm>
            </BSModalBody>
            <BSModalFooter><BSButton Color="Color.Dark" OnClick="@(() => NewExpenseLimitModal.Hide())">Stäng</BSButton></BSModalFooter>
        </BSModal>
        <br />


        <BSCard CardType="CardType.Card">
            <BSCard CardType="CardType.Header">Befintliga utgiftsmål</BSCard>
            <BSCard CardType="CardType.Body">
                @if (AppState.ExpenseLimits != null && AppState.ExpenseLimits.Count() > 0)
                {

                    <BSModal @ref="EditExpenseLimitModal">
                        <BSModalHeader OnClick="(() => EditExpenseLimitModal.Hide())">Redigera utgiftsmål</BSModalHeader>
                        <BSModalBody>
                            <BSForm Model="editExpenseLimit" OnSubmit="@(() => UpdateExpenseLimit(editExpenseLimit))">
                                <BSFormGroup>
                                    <BSLabel>Namn</BSLabel>
                                    <BSInput @bind-Value="editExpenseLimit.Name"></BSInput>
                                </BSFormGroup>
                                <BSFormGroup>
                                    <BSLabel>Kategori</BSLabel>
                                    <BSInput InputType="InputType.Select" @bind-Value="editExpenseLimit.CategoryId">
                                        @foreach (var category in AppState.Categories)
                                                {
                                            <option value="@category.Id">@category.Name</option>
                                                }
                                    </BSInput>
                                </BSFormGroup>
                                <BSFormGroup>
                                    <BSLabel>Summa</BSLabel>
                                    <BSInput InputType="InputType.Number" @bind-Value="editExpenseLimit.Amount"></BSInput>
                                </BSFormGroup>
                                <BSFormGroup>
                                    <BSButton Color="Color.Dark" @onclick="@(() => EditDateModal.Show())">Välj datum</BSButton>
                                    <BSModal @ref="EditDateModal">
                                        <BSModalHeader OnClick="@(() => EditDateModal.Hide())">Ändra tidsintervall</BSModalHeader>
                                        <BSModalBody>
                                            <DisplayDatesModal SetFromDate="SetFromDate" SetToDate="SetToDate" />
                                        </BSModalBody>
                                        <BSModalFooter>
                                            <BSButton Color="Color.Dark" @onclick="@(() => EditDateModal.Hide())">Stäng</BSButton>
                                        </BSModalFooter>
                                    </BSModal>
                                </BSFormGroup>
                                <BSButton Color="Color.Success" ButtonType="ButtonType.Submit">Spara</BSButton>
                                <BSButton OnClick="@(() => EditExpenseLimitModal.Hide())" Color="Color.Dark">Avbryt</BSButton>
                            </BSForm>
                        </BSModalBody>
                    </BSModal>

                    foreach (var expenseLimit in AppState.ExpenseLimits)
                    {
                        <div style="display: flex; justify-content:space-between; border-bottom: 1px solid black;">
                            <div style="display: flex;">
                                <p style="margin-right: 10px;">@expenseLimit.Name</p>
                                <p>@expenseLimit.Amount kr</p>
                            </div>
                            <div>
                                <BSButton Color="Color.Dark" OnClick="(() => ShowEditExpenseModal(expenseLimit))">Redigera</BSButton>
                                <BSButton Color="Color.Danger" OnClick="(() => ShowRemoveModal(expenseLimit.Id))">Ta bort</BSButton>
                            </div>
                        </div>

                    }
                }
            </BSCard>

        </BSCard>
        <BSModal @ref="DeleteExpenseLimitModal">
            <BSModalHeader OnClick="(() => DeleteExpenseLimitModal.Hide())">Ta bort utgiftsmål</BSModalHeader>
            <BSModalBody>Vill du verkligen ta bort detta utgiftsmål?</BSModalBody>
            <BSModalFooter>
                <BSButton Color="Color.Danger" OnClick="(() => RemoveExpenseLimit())">Bekräfta</BSButton>
                <BSButton OnClick="(() => DeleteExpenseLimitModal.Hide())" Color="Color.Dark">Avbryt</BSButton>
            </BSModalFooter>
        </BSModal>
    </div>
}

@code {
    BSModal DeleteExpenseLimitModal { get; set; }
    BSModal EditExpenseLimitModal { get; set; }
    BSModal NewExpenseLimitModal { get; set; }
    ExpenseLimit editExpenseLimit = new ExpenseLimit();
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
    BSModal DateModal { get; set; }
    BSModal EditDateModal { get; set; }
    ExpenseLimit newExpenseLimit = new ExpenseLimit();

    string deleteExpenseLimitId;

    bool expenseLimitDateError;
    bool expenseLimitCategoryError;
    bool expenseLimitNameError;

    private void ShowNewExpenseModal()
    {
        newExpenseLimit.CategoryId = "nm5tXgPCOwfavR9dbF2w";
        NewExpenseLimitModal.Show();
    }

    private void ShowEditExpenseModal(ExpenseLimit expenseLimit)
    {
        editExpenseLimit = expenseLimit;
        EditExpenseLimitModal.Show();
    }
    public void SetFromDate(ChangeEventArgs e)
    {
        var year = int.Parse(e.Value.ToString().Substring(0, 4));
        var month = int.Parse(e.Value.ToString().Substring(5, 2));
        var day = int.Parse(e.Value.ToString().Substring(8, 2));

        StartDate = new DateTime(year, month, day);
    }

    public void SetToDate(ChangeEventArgs e)
    {
        var year = int.Parse(e.Value.ToString().Substring(0, 4));
        var month = int.Parse(e.Value.ToString().Substring(5, 2));
        var day = int.Parse(e.Value.ToString().Substring(8, 2));

        EndDate = new DateTime(year, month, day);
    }

    private async Task CreateExpenseLimit()
    {
        newExpenseLimit.StartDate = StartDate;
        newExpenseLimit.EndDate = EndDate;
        newExpenseLimit.OwnerId = AppState.User.Id;

        if (newExpenseLimit.Name == null)
        {
            expenseLimitNameError = true;
            await Task.Delay(5000);
            expenseLimitNameError = false;
            StateHasChanged();
        }
        else if (newExpenseLimit.CategoryId == null)
        {
            expenseLimitCategoryError = true;
            await Task.Delay(5000);
            expenseLimitCategoryError = false;
            StateHasChanged();
        }
        else if (newExpenseLimit.StartDate.ToShortDateString() == "0001-01-01" || newExpenseLimit.EndDate.ToShortDateString() == "0001-01-01")
        {
            expenseLimitDateError = true;
            await Task.Delay(5000);
            expenseLimitDateError = false;
            StateHasChanged();
        }
        else
        {
            await http.SendJsonAsync(HttpMethod.Post, "api/expenselimits", newExpenseLimit);
            newExpenseLimit = new ExpenseLimit();
            await GetExpenseLimits();
            StartDate = new DateTime();
            EndDate = new DateTime();
            NewExpenseLimitModal.Hide();
            StateHasChanged();
        }
    }

    private async Task UpdateExpenseLimit(ExpenseLimit expenseLimit)
    {
        expenseLimit.SetModificationState(false);
        if (StartDate != new DateTime())
        {
            expenseLimit.StartDate = StartDate;
        }

        if (EndDate != new DateTime())
        {
            expenseLimit.EndDate = EndDate;
        }

        await http.SendJsonAsync(HttpMethod.Put, "api/expenselimits", expenseLimit);
        EditExpenseLimitModal.Hide();
    }
    private void ShowRemoveModal(string id)
    {
        deleteExpenseLimitId = id;
        DeleteExpenseLimitModal.Show();
    }
    private async void RemoveExpenseLimit()
    {
        await http.DeleteAsync("api/expenselimits/" + deleteExpenseLimitId);
        await GetExpenseLimits();
        DeleteExpenseLimitModal.Hide();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        AppState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);
        if (!AppState.IsAuth)
        {
            try
            {
                var user = await ValidateSession();
                if (string.IsNullOrEmpty(user.ErrorMessage))
                {
                    await GetUser(user.UserId);
                    await GetCategories();
                    await GetTransactions();
                    await GetExpenseLimits();
                }
                else
                {
                    navManager.NavigateTo("/");
                }
            }
            catch (Exception)
            {
                Console.WriteLine("error");
                navManager.NavigateTo("/");
            }
        }

    }

    private async Task<UserResponse> ValidateSession()
    {
        var user = await http.SendJsonAsync<UserResponse>(HttpMethod.Post, "/user/session", null);
        return user;
    }
    private async Task GetCategories()
    {
        var categories = await http.GetJsonAsync<List<Category>>($"api/categories/{AppState.User.Id}");
        AppState.UpdateCategories(this, categories);
    }

    private async Task GetExpenseLimits()
    {
        var expenseLimits = await http.GetJsonAsync<List<ExpenseLimit>>("api/expenselimits/" + AppState.User.Id);
        AppState.UpdateExpenseLimits(this, expenseLimits);
    }

    private async Task GetTransactions()
    {
        try
        {
            var transactions = await http.GetJsonAsync<List<Transaction>>("api/transactions/" + AppState.User.Id);
            AppState.UpdateTransactions(this, transactions);

        }
        catch (Exception)
        {

            throw;
        }
    }

    private async Task GetUser(string userId)
    {
        var user = await http.GetJsonAsync<User>("api/user/" + userId);
        AppState.SetAuthState(this, user, true);
    }

    private async Task AppState_StateChanged(ComponentBase source, string property)
    {
        if (source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (source, property) => await AppState_StateChanged(source, property);
    }
}
