@page "/transactions"
@inject HttpClient http


<h3>Transaktioner</h3>
<TransactionHeader FromDate="fromDate" ToDate="toDate" SetFromDate="SetFromDate" SetToDate="SetToDate" SetCurrentCategory="SetCurrentCategory" Categories="categories" CurrentCategory="currentCategory" />

@if (transactions == null)
{
    <p><em>Loading...</em></p>
}

else
{
    if (categories != null && categories.Count > 0 && transactions != null && transactions.Count > 0)
    {

        <TransactionBody Categories="categories" CurrentCategory="currentCategory" FromDate="fromDate" ToDate="toDate" Index="index" PageSize="pageSize" Transactions="transactions" />

        <nav aria-label="Page navigation example">
            <ul class="pagination">
                <li class="page-item"><div class="page-link" style="cursor: pointer" @onclick="(() => SetIndex(index - 1))">Föregående</div></li>
                @for (int i = 0; i < (GetTransactionCount() / pageSize) + 1; i++)
                {
                    var n = i;
                    <li class="page-item"><div class="page-link" style="cursor: pointer" @onclick="(() => SetIndex(n))">@(i + 1) </div></li>

                }
                <li class="page-item"><div class="page-link" style="cursor: pointer" @onclick="(() => SetIndex(index + 1))">Nästa</div></li>
            </ul>
        </nav>
    }
}

@code {
    int index = 0;
    int pageSize = 5;

    DateTime fromDate = DateTime.Today.AddMonths(-1);
    DateTime toDate = DateTime.Today;
    public Category currentCategory = new Category() { Id = null };
    public List<Transaction> transactions = new List<Transaction>();
    public List<Category> categories = new List<Category>();

    protected override async Task OnInitializedAsync()
    {

        categories = await http.GetJsonAsync<List<Category>>("api/categories");
        transactions = await http.GetJsonAsync<List<Transaction>>("api/transactions");
        Console.WriteLine(categories.Count);
        Console.WriteLine(transactions.Count);
    }

    public void SetCurrentCategory(string categoryId)
    {
        if (categoryId == null)
        {
            currentCategory = new Category() { Id = null };
        }
        else
        {
            currentCategory = categories.Find(x => x.Id.Equals(categoryId));
            Console.WriteLine(currentCategory);
        }
    }

    private int GetTransactionCount()
    {
        if (currentCategory.Id == null)
        {
            return transactions.Count;
        }
        else
        {
            return transactions.FindAll(x => x.CategoryId.Equals(currentCategory.Id)).Count;
        }
    }

    public void SetIndex(int i) // bör endast baseras på vilken som är nuvarande kategori.
    {
        if (i >= 0 && i <= (GetTransactionCount() / pageSize))
        {
            Console.WriteLine(i);
            index = i;
            Console.WriteLine(index);
        }
    }

    public void SetFromDate(ChangeEventArgs e)
    {
        var year = int.Parse(e.Value.ToString().Substring(0, 4));
        var month = int.Parse(e.Value.ToString().Substring(5, 2));
        var day = int.Parse(e.Value.ToString().Substring(8, 2));

        fromDate = new DateTime(year, month, day);
        Console.WriteLine(fromDate);
    }

    public void SetToDate(ChangeEventArgs e)
    {
        var year = int.Parse(e.Value.ToString().Substring(0, 4));
        var month = int.Parse(e.Value.ToString().Substring(5, 2));
        var day = int.Parse(e.Value.ToString().Substring(8, 2));

        toDate = new DateTime(year, month, day);
        Console.WriteLine(toDate);
    }

}
