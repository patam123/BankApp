@page "/settings"
@inject AppStateContainer AppState
@inject HttpClient http
@inject NavigationManager navManager
@using System.Text.Json
@using System.Text

@implements IDisposable

@if (AppState.IsAuth)
{
    <h2>Redigera profil</h2>
    <br />
    <br />
    <BSForm Model="registrationModel" OnValidSubmit="(() => UpdateUser())">
        <BSFormGroup>
            <BSLabel For="firstname">Redigera Förnamn</BSLabel>
            <BSInput T="string" Id="firstname" InputType="InputType.Text" @bind-Value="registrationModel.FirstName" />
        </BSFormGroup>
        <BSFormGroup>
            <BSLabel For="lastname">Redigera Efternamn</BSLabel>
            <BSInput T="string" Id="lastname" InputType="InputType.Text" @bind-Value="registrationModel.LastName" />
        </BSFormGroup>
        <BSFormGroup>
            <BSLabel For="email">Redigera Email</BSLabel>
            <BSInput T="string" Id="email" InputType="InputType.Email" @bind-Value="registrationModel.Email" />
        </BSFormGroup>
        <BSFormGroup>
            <BSLabel For="password">Nytt Lösenord</BSLabel>
            <BSInput T="string" Id="password" InputType="InputType.Password" @bind-Value="registrationModel.Password" />
        </BSFormGroup>
        <BSFormGroup>
            <BSLabel For="repeatpassword">Upprepa nytt lösenord</BSLabel>
            <BSInput T="string" Id="repeatpassword" InputType="InputType.Password" @bind-Value="registrationModel.RepeatPassword" />
        </BSFormGroup>
        <BSButton ButtonType="ButtonType.Submit" Color="Color.Dark">Spara profil</BSButton>
    </BSForm>
}

@code {

    RegistrationModel registrationModel = new RegistrationModel();

    private async Task<string> UpdateUser()
    {
        if (registrationModel.Password.Equals(registrationModel.RepeatPassword))
        {
            var user = new User()
            {
                Id = AppState.User.Id,
                Email = registrationModel.Email,
                Password = registrationModel.Password,
                FirstName = registrationModel.FirstName,
                LastName = registrationModel.LastName,
            };

            var datajson = JsonSerializer.Serialize(user);
            var stringContent = new StringContent(datajson, Encoding.UTF8, "application/json");
            var response = await http.PutAsync("/user/update", stringContent);
            var responseContent = await response.Content.ReadAsStringAsync();
            await GetUser(AppState.User.Id);
            StateHasChanged();
            return responseContent;
        }
        return "Lösenordsfälten stämmer inte överens";
    }

    protected override async Task OnInitializedAsync()
    {
        AppState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);
        if (!AppState.IsAuth)
        {
            try
            {
                var user = await ValidateSession();
                if (string.IsNullOrEmpty(user.ErrorMessage))
                {
                    await GetUser(user.UserId);
                    await GetCategories();
                    await GetTransactions();
                    await GetExpenseLimits();

                    registrationModel.Email = AppState.User.Email;
                    registrationModel.FirstName = AppState.User.FirstName;
                    registrationModel.LastName = AppState.User.LastName;
                    registrationModel.Password = "";
                    registrationModel.RepeatPassword = "";
                    StateHasChanged();
                }
                else
                {
                    navManager.NavigateTo("/");
                }
            }
            catch (Exception)
            {
                Console.WriteLine("error");
                navManager.NavigateTo("/");
                //throw;
            }
        }
        registrationModel.Email = AppState.User.Email;
        registrationModel.FirstName = AppState.User.FirstName;
        registrationModel.LastName = AppState.User.LastName;
        registrationModel.Password = "";
        registrationModel.RepeatPassword = "";
        StateHasChanged();

    }

    private async Task<UserResponse> ValidateSession()
    {
        var user = await http.SendJsonAsync<UserResponse>(HttpMethod.Post, "/user/session", null);
        return user;
    }
    private async Task GetCategories()
    {
        var categories = await http.GetJsonAsync<List<Category>>($"api/categories/{AppState.User.Id}");
        AppState.UpdateCategories(this, categories);
    }

    private async Task GetExpenseLimits()
    {
        var expenseLimits = await http.GetJsonAsync<List<ExpenseLimit>>("api/expenselimits/" + AppState.User.Id);
        AppState.UpdateExpenseLimits(this, expenseLimits);
    }

    private async Task GetTransactions()
    {
        try
        {
            var transactions = await http.GetJsonAsync<List<Transaction>>("api/transactions/" + AppState.User.Id);
            AppState.UpdateTransactions(this, transactions);

        }
        catch (Exception)
        {

            throw;
        }
    }

    private async Task GetUser(string userId)
    {
        var user = await http.GetJsonAsync<User>("api/user/" + userId);
        AppState.SetAuthState(this, user, true);
    }

    private async Task AppState_StateChanged(ComponentBase source, string property)
    {
        if (source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (source, property) => await AppState_StateChanged(source, property);
    }


}
