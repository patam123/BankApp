@page "/account"
@inject HttpClient http
@inject AppStateContainer AppState
@inject NavigationManager navManager
@implements IDisposable

@if (AppState.User != null)
{
    <h1>@AppState.User.DisplayName</h1>


    <h3>Kontoinformation</h3>
}


@if (AppState.Categories != null && AppState.Transactions != null)
{
<DetailedAccountInformationHeader FromDate="fromDate" ToDate="toDate" SetFromDate="SetFromDate" SetToDate="SetToDate" />
<DetailedAccountInformationBody SetCategorySums="SetCategorySums" FromDate="fromDate" ToDate="toDate" Categories="AppState.Categories" Transactions="AppState.Transactions" />
}
<br />
@if (AppState.ExpenseLimits != null)
{
    <div class="accordion">
        <BSCard CardType="CardType.Card">
            <BSCard CardType="CardType.Header">Utgiftsgränser</BSCard>
            <BSCard CardType="CardType.Body">
                @if (AppState.ExpenseLimits.Count > 0)
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Namn</th>
                                <th>Kategori</th>
                                <th>Startdatum</th>
                                <th>Slutdatum</th>
                                <th>Utgiftsmål</th>
                                <th>Spenderad summa</th>
                            </tr>
                        </thead>
                        @foreach (var expenseLimit in AppState.ExpenseLimits)
                        {
                            <tbody>
                                <tr style="background-color: @(AppState.Transactions.Where(x => x.CategoryId == expenseLimit.CategoryId && x.TransactionDate >= expenseLimit.StartDate && x.TransactionDate <= expenseLimit.EndDate).Sum(x => x.Amount) > expenseLimit.Amount ? "red" : "seagreen")">
                                    <td>@expenseLimit.Name</td>
                                    <td>@AppState.Categories.Where(x => x.Id == expenseLimit.CategoryId).FirstOrDefault().Name</td>
                                    <td>@expenseLimit.StartDate.ToShortDateString()</td>
                                    <td>@expenseLimit.EndDate.ToShortDateString()</td>
                                    <td>@expenseLimit.Amount</td>
                                    <td>@AppState.Transactions.Where(x => x.CategoryId == expenseLimit.CategoryId && x.TransactionDate >= expenseLimit.StartDate && x.TransactionDate <= expenseLimit.EndDate).Sum(x => x.Amount)</td>
                                </tr>
                            </tbody>
                        }
                    </table>
                }
                else
                {
                    <p>Du har inte skapat några målsättningar för utgifter. Det kan du göra under <a href="/expenses">utgiftsmål</a>.</p>
                }
            </BSCard>

        </BSCard>

    </div>
}

@code{



    DateTime fromDate = DateTime.Today.AddMonths(-1);
    DateTime toDate = DateTime.Today;

    public List<Category> categories = new List<Category>();

    public List<Transaction> transactions = new List<Transaction>();

    protected override async Task OnInitializedAsync()
    {
        AppState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);
        if (!AppState.IsAuth)
        {
            try
            {
                var user = await ValidateSession();
                if (string.IsNullOrEmpty(user.ErrorMessage))
                {
                    await GetUser(user.UserId);
                    await GetCategories();
                    await GetExpenseLimits();
                    await GetTransactions();
                    SetCategorySums();
                }
                else
                {
                    navManager.NavigateTo("/");
                }
            }
            catch (Exception)
            {

                navManager.NavigateTo("/");
            }
        }
        else
        {
            SetCategorySums();
        }
    }

    private async Task<UserResponse> ValidateSession()
    {
        var user = await http.SendJsonAsync<UserResponse>(HttpMethod.Post, "/user/session", null);
        return user;
    }

    public void SetFromDate(ChangeEventArgs e)
    {
        var year = int.Parse(e.Value.ToString().Substring(0, 4));
        var month = int.Parse(e.Value.ToString().Substring(5, 2));
        var day = int.Parse(e.Value.ToString().Substring(8, 2));

        fromDate = new DateTime(year, month, day);
        Console.WriteLine(fromDate);
        SetCategorySums();
    }

    public void SetToDate(ChangeEventArgs e)
    {
        var year = int.Parse(e.Value.ToString().Substring(0, 4));
        var month = int.Parse(e.Value.ToString().Substring(5, 2));
        var day = int.Parse(e.Value.ToString().Substring(8, 2));

        toDate = new DateTime(year, month, day);
        Console.WriteLine(toDate);
        SetCategorySums();
    }

    private void SetCategorySums()
    {
        foreach (var category in AppState.Categories)
        {
            category.TransactionSum = 0;
            category.TransactionSum += AppState.Transactions.FindAll(x => x.CategoryId.Equals(category.Id) && x.TransactionDate >= fromDate && x.TransactionDate <= toDate).Sum(x => x.Amount);
        }
    }
    private async Task GetUser(string userId)
    {
        var user = await http.GetJsonAsync<User>("api/user/" + userId);
        AppState.SetAuthState(this, user, true);
    }

    private async Task GetCategories()
    {
        categories = await http.GetJsonAsync<List<Category>>($"api/categories/{AppState.User.Id}");
        AppState.UpdateCategories(this, categories);
    }
    private async Task GetTransactions()
    {
        try
        {
            transactions = await http.GetJsonAsync<List<Transaction>>("api/transactions/" + AppState.User.Id);
            AppState.UpdateTransactions(this, transactions);

        }
        catch (Exception)
        {

            throw;
        }
    }

    private async Task GetExpenseLimits()
    {
        var expenseLimits = await http.GetJsonAsync<List<ExpenseLimit>>("api/expenselimits/" + AppState.User.Id);
        AppState.UpdateExpenseLimits(this, expenseLimits);
    }

    private async Task AppState_StateChanged(ComponentBase source, string property)
    {
        if (source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (source, property) => await AppState_StateChanged(source, property);
    }
}




